import numpy as np
import pandas as pd
from scipy.optimize import minimize, minimize_scalar
import logging

from discrete_opt import scalar_discrete_gap_filling_minimizer, multivariate_discrete_gap_filling_minimizer
from discrete_opt.util import PandasSeriesFunction, LoggingFunction


def test_scalar_discrete_gap_filling_minimizer__1(verbose=False):
    Y = -np.array([
        311.80416667, 313.78416667, 314.52416667, 314.52416667, 314.52416667, 314.52416667,
        314.62416667, 314.62416667, 314.62416667, 314.62416667, 314.62416667, 314.62416667,  # all same, index 6-11
        313.22416667, 313.22416667, 313.22416667, 313.22416667, 313.22416667, 255.64416667,
        247.12416667, 247.12416667, 148.82416667])
    series = pd.Series(Y)
    ymin = Y.min()
    fun = PandasSeriesFunction(series)
    if verbose:
        fun = LoggingFunction(fun)

    optresult = minimize_scalar(
        fun, bracket=(series.index.min(), series.index.max()),
        method=scalar_discrete_gap_filling_minimizer,
        options=dict(parabolic_method=True, golden_section_method=False, verbose=verbose))
    assert optresult.fun == ymin

    optresult = minimize_scalar(
        fun, bracket=(series.index.min(), series.index.min(), series.index.max()),
        method=scalar_discrete_gap_filling_minimizer,
        options=dict(parabolic_method=True, golden_section_method=False, verbose=verbose))
    assert optresult.fun == ymin

    optresult = minimize_scalar(
        fun, bracket=(series.index.min(), 1, series.index.max()),
        method=scalar_discrete_gap_filling_minimizer,
        options=dict(parabolic_method=True, golden_section_method=False, verbose=verbose))
    assert optresult.fun == ymin

    optresult = minimize_scalar(
        fun, bracket=(series.index.min(), series.index.max(), series.index.max()),
        method=scalar_discrete_gap_filling_minimizer,
        options=dict(parabolic_method=True, golden_section_method=False, verbose=verbose))
    assert optresult.fun == ymin

    optresult = minimize_scalar(
        fun, bracket=(series.index.min(), series.index.max()-1, series.index.max()),
        method=scalar_discrete_gap_filling_minimizer,
        options=dict(parabolic_method=True, golden_section_method=False, verbose=verbose))
    assert optresult.fun == ymin


def test_scalar_discrete_gap_filling_minimizer__2(verbose=False):

    def fun(x):
        return int(1.0 * (x - 0.5) ** 2)

    besty = 0.0
    bestx = [0.0, 1.0]

    if verbose:
        fun = LoggingFunction(fun)

    optresult = minimize_scalar(
        fun, bracket=(-2.0, 30.0),
        method=scalar_discrete_gap_filling_minimizer,
        options=dict(parabolic_method=True, golden_section_method=False, verbose=verbose))
    # if verbose: logging.info(optresult)
    assert optresult.fun == besty
    assert optresult.x in bestx

    optresult = minimize_scalar(
        fun, bracket=(-2.0, -2.0, 30.0),
        method=scalar_discrete_gap_filling_minimizer,
        options=dict(parabolic_method=True, golden_section_method=False, verbose=verbose))
    # if verbose: logging.info(optresult)
    assert optresult.fun == besty
    assert optresult.x in bestx

    optresult = minimize_scalar(
        fun, bracket=(-2.0, 30.0, 30.0),
        method=scalar_discrete_gap_filling_minimizer,
        options=dict(parabolic_method=True, golden_section_method=False, verbose=verbose))
    # if verbose: logging.info(optresult)
    assert optresult.fun == besty
    assert optresult.x in bestx

    optresult = minimize_scalar(
        fun, bracket=(-2.0, 30.0),
        method=scalar_discrete_gap_filling_minimizer,
        options=dict(parabolic_method=True, golden_section_method=True, verbose=verbose))
    assert optresult.fun == besty
    assert optresult.x in bestx

def test_multivariate_discrete_gap_filling_minimizer__1(verbose=False):
    x0, x1, y = (np.array([0., 0., 0., 0., 0., 0., 0., 0., 0.,
                           0., 0., 0., 0., 0., 0., 0., 0., 0.,
                           0., 0., 0., 0.05, 0.05, 0.05, 0.05, 0.05, 0.05,
                           0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05,
                           0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.1, 0.1, 0.1,
                           0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
                           0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
                           0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15,
                           0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15,
                           0.15, 0.15, 0.15, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2,
                           0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2,
                           0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.25, 0.25, 0.25,
                           0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25,
                           0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25,
                           0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3,
                           0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3,
                           0.3, 0.3, 0.3, 0.35, 0.35, 0.35, 0.35, 0.35, 0.35,
                           0.35, 0.35, 0.35, 0.35, 0.35, 0.35, 0.35, 0.35, 0.35,
                           0.35, 0.35, 0.35, 0.35, 0.35, 0.35, 0.4, 0.4, 0.4,
                           0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4,
                           0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4,
                           0.45, 0.45, 0.45, 0.45, 0.45, 0.45, 0.45, 0.45, 0.45,
                           0.45, 0.45, 0.45, 0.45, 0.45, 0.45, 0.45, 0.45, 0.45,
                           0.45, 0.45, 0.45, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
                           0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
                           0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.55, 0.55, 0.55,
                           0.55, 0.55, 0.55, 0.55, 0.55, 0.55, 0.55, 0.55, 0.55,
                           0.55, 0.55, 0.55, 0.55, 0.55, 0.55, 0.55, 0.55, 0.55,
                           0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6,
                           0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6,
                           0.6, 0.6, 0.6, 0.65, 0.65, 0.65, 0.65, 0.65, 0.65,
                           0.65, 0.65, 0.65, 0.65, 0.65, 0.65, 0.65, 0.65, 0.65,
                           0.65, 0.65, 0.65, 0.65, 0.65, 0.65, 0.7, 0.7, 0.7,
                           0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7,
                           0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7,
                           0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75,
                           0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75,
                           0.75, 0.75, 0.75, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8,
                           0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8,
                           0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.85, 0.85, 0.85,
                           0.85, 0.85, 0.85, 0.85, 0.85, 0.85, 0.85, 0.85, 0.85,
                           0.85, 0.85, 0.85, 0.85, 0.85, 0.85, 0.85, 0.85, 0.85,
                           0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9,
                           0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9, 0.9,
                           0.9, 0.9, 0.9, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95,
                           0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 0.95,
                           0.95, 0.95, 0.95, 0.95, 0.95, 0.95, 1., 1., 1.,
                           1., 1., 1., 1., 1., 1., 1., 1., 1.,
                           1., 1., 1., 1., 1., 1., 1., 1., 1.]),
                 np.array([0., 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4,
                           0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85,
                           0.9, 0.95, 1., 0., 0.05, 0.1, 0.15, 0.2, 0.25,
                           0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7,
                           0.75, 0.8, 0.85, 0.9, 0.95, 1., 0., 0.05, 0.1,
                           0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55,
                           0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1.,
                           0., 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4,
                           0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85,
                           0.9, 0.95, 1., 0., 0.05, 0.1, 0.15, 0.2, 0.25,
                           0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7,
                           0.75, 0.8, 0.85, 0.9, 0.95, 1., 0., 0.05, 0.1,
                           0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55,
                           0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1.,
                           0., 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4,
                           0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85,
                           0.9, 0.95, 1., 0., 0.05, 0.1, 0.15, 0.2, 0.25,
                           0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7,
                           0.75, 0.8, 0.85, 0.9, 0.95, 1., 0., 0.05, 0.1,
                           0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55,
                           0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1.,
                           0., 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4,
                           0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85,
                           0.9, 0.95, 1., 0., 0.05, 0.1, 0.15, 0.2, 0.25,
                           0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7,
                           0.75, 0.8, 0.85, 0.9, 0.95, 1., 0., 0.05, 0.1,
                           0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55,
                           0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1.,
                           0., 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4,
                           0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85,
                           0.9, 0.95, 1., 0., 0.05, 0.1, 0.15, 0.2, 0.25,
                           0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7,
                           0.75, 0.8, 0.85, 0.9, 0.95, 1., 0., 0.05, 0.1,
                           0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55,
                           0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1.,
                           0., 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4,
                           0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85,
                           0.9, 0.95, 1., 0., 0.05, 0.1, 0.15, 0.2, 0.25,
                           0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7,
                           0.75, 0.8, 0.85, 0.9, 0.95, 1., 0., 0.05, 0.1,
                           0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55,
                           0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1.,
                           0., 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4,
                           0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85,
                           0.9, 0.95, 1., 0., 0.05, 0.1, 0.15, 0.2, 0.25,
                           0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7,
                           0.75, 0.8, 0.85, 0.9, 0.95, 1., 0., 0.05, 0.1,
                           0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55,
                           0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1.]),
                 -np.array([278.83083333, 295.05083333, 301.99083333, 301.99083333,
                            301.99083333, 301.99083333, 305.51083333, 305.51083333,
                            305.51083333, 305.51083333, 305.51083333, 305.51083333,
                            303.63083333, 303.63083333, 303.63083333, 303.63083333,
                            303.63083333, 235.11083333, 226.19083333, 226.19083333,
                            126.83083333, 278.83083333, 295.05083333, 301.99083333,
                            301.99083333, 301.99083333, 301.99083333, 305.51083333,
                            305.51083333, 305.51083333, 305.51083333, 305.51083333,
                            305.51083333, 303.63083333, 303.63083333, 303.63083333,
                            303.63083333, 303.63083333, 235.11083333, 226.19083333,
                            226.19083333, 126.83083333, 278.83083333, 295.05083333,
                            301.99083333, 301.99083333, 301.99083333, 301.99083333,
                            305.51083333, 305.51083333, 305.51083333, 305.51083333,
                            305.51083333, 305.51083333, 303.63083333, 303.63083333,
                            303.63083333, 303.63083333, 303.63083333, 235.11083333,
                            226.19083333, 226.19083333, 126.83083333, 278.83083333,
                            295.05083333, 301.99083333, 301.99083333, 301.99083333,
                            301.99083333, 305.51083333, 305.51083333, 305.51083333,
                            305.51083333, 305.51083333, 305.51083333, 303.63083333,
                            303.63083333, 303.63083333, 303.63083333, 303.63083333,
                            235.11083333, 226.19083333, 226.19083333, 126.83083333,
                            278.83083333, 295.05083333, 301.99083333, 301.99083333,
                            301.99083333, 301.99083333, 305.51083333, 305.51083333,
                            305.51083333, 305.51083333, 305.51083333, 305.51083333,
                            303.63083333, 303.63083333, 303.63083333, 303.63083333,
                            303.63083333, 235.11083333, 226.19083333, 226.19083333,
                            126.83083333, 278.83083333, 295.05083333, 301.99083333,
                            301.99083333, 301.99083333, 301.99083333, 305.51083333,
                            305.51083333, 305.51083333, 305.51083333, 305.51083333,
                            305.51083333, 303.63083333, 303.63083333, 303.63083333,
                            303.63083333, 303.63083333, 235.11083333, 226.19083333,
                            226.19083333, 126.83083333, 278.83083333, 295.05083333,
                            301.99083333, 301.99083333, 301.99083333, 301.99083333,
                            305.51083333, 305.51083333, 305.51083333, 305.51083333,
                            305.51083333, 305.51083333, 303.63083333, 303.63083333,
                            303.63083333, 303.63083333, 303.63083333, 235.11083333,
                            226.19083333, 226.19083333, 126.83083333, 278.83083333,
                            295.05083333, 301.99083333, 301.99083333, 301.99083333,
                            301.99083333, 305.51083333, 305.51083333, 305.51083333,
                            305.51083333, 305.51083333, 305.51083333, 303.63083333,
                            303.63083333, 303.63083333, 303.63083333, 303.63083333,
                            235.11083333, 226.19083333, 226.19083333, 126.83083333,
                            278.83083333, 295.05083333, 301.99083333, 301.99083333,
                            301.99083333, 301.99083333, 305.51083333, 305.51083333,
                            305.51083333, 305.51083333, 305.51083333, 305.51083333,
                            303.63083333, 303.63083333, 303.63083333, 303.63083333,
                            303.63083333, 235.11083333, 226.19083333, 226.19083333,
                            126.83083333, 278.83083333, 295.05083333, 301.99083333,
                            301.99083333, 301.99083333, 301.99083333, 305.51083333,
                            305.51083333, 305.51083333, 305.51083333, 305.51083333,
                            305.51083333, 303.63083333, 303.63083333, 303.63083333,
                            303.63083333, 303.63083333, 235.11083333, 226.19083333,
                            226.19083333, 126.83083333, 278.83083333, 295.05083333,
                            301.99083333, 301.99083333, 301.99083333, 301.99083333,
                            305.51083333, 305.51083333, 305.51083333, 305.51083333,
                            305.51083333, 305.51083333, 303.63083333, 303.63083333,
                            303.63083333, 303.63083333, 303.63083333, 235.11083333,
                            226.19083333, 226.19083333, 126.83083333, 278.83083333,
                            295.05083333, 301.99083333, 301.99083333, 301.99083333,
                            301.99083333, 305.51083333, 305.51083333, 305.51083333,
                            305.51083333, 305.51083333, 305.51083333, 303.63083333,
                            303.63083333, 303.63083333, 303.63083333, 303.63083333,
                            235.11083333, 226.19083333, 226.19083333, 126.83083333,
                            278.83083333, 295.05083333, 301.99083333, 301.99083333,
                            301.99083333, 301.99083333, 305.51083333, 305.51083333,
                            305.51083333, 305.51083333, 305.51083333, 305.51083333,
                            303.63083333, 303.63083333, 303.63083333, 303.63083333,
                            303.63083333, 235.11083333, 226.19083333, 226.19083333,
                            126.83083333, 278.83083333, 295.05083333, 301.99083333,
                            301.99083333, 301.99083333, 301.99083333, 305.51083333,
                            305.51083333, 305.51083333, 305.51083333, 305.51083333,
                            305.51083333, 303.63083333, 303.63083333, 303.63083333,
                            303.63083333, 303.63083333, 235.11083333, 226.19083333,
                            226.19083333, 126.83083333, 278.83083333, 295.05083333,
                            301.99083333, 301.99083333, 301.99083333, 301.99083333,
                            305.51083333, 305.51083333, 305.51083333, 305.51083333,
                            305.51083333, 305.51083333, 303.63083333, 303.63083333,
                            303.63083333, 303.63083333, 303.63083333, 235.11083333,
                            226.19083333, 226.19083333, 126.83083333, 278.83083333,
                            295.05083333, 301.99083333, 301.99083333, 301.99083333,
                            301.99083333, 305.51083333, 305.51083333, 305.51083333,
                            305.51083333, 305.51083333, 305.51083333, 303.63083333,
                            303.63083333, 303.63083333, 303.63083333, 303.63083333,
                            235.11083333, 226.19083333, 226.19083333, 126.83083333,
                            278.83083333, 295.05083333, 301.99083333, 301.99083333,
                            301.99083333, 301.99083333, 305.51083333, 305.51083333,
                            305.51083333, 305.51083333, 305.51083333, 305.51083333,
                            303.63083333, 303.63083333, 303.63083333, 303.63083333,
                            303.63083333, 235.11083333, 226.19083333, 226.19083333,
                            126.83083333, 311.80416667, 313.78416667, 314.52416667,
                            314.52416667, 314.52416667, 314.52416667, 314.62416667,
                            314.62416667, 314.62416667, 314.62416667, 314.62416667,
                            314.62416667, 313.22416667, 313.22416667, 313.22416667,
                            313.22416667, 313.22416667, 255.64416667, 247.12416667,
                            247.12416667, 148.82416667, 308.65, 310.63,
                            311.49, 311.49, 311.49, 311.49,
                            311.95, 311.95, 311.95, 311.95,
                            311.95, 311.95, 311.75, 311.75,
                            311.75, 311.75, 311.75, 257.05,
                            249.15, 249.15, 150.95, 308.65,
                            310.63, 311.49, 311.49, 311.49,
                            311.49, 311.95, 311.95, 311.95,
                            311.95, 311.95, 311.95, 311.75,
                            311.75, 311.75, 311.75, 311.75,
                            257.05, 249.15, 249.15, 150.95,
                            251.625, 251.625, 251.625, 251.625,
                            251.625, 251.625, 251.625, 251.625,
                            251.625, 251.625, 251.625, 251.625,
                            251.625, 251.625, 251.625, 251.625,
                            251.625, 246.005, 245.225, 245.225, 152.125]))
    x0 = 20.0 * x0
    x1 = 20.0 * x1
    df = pd.DataFrame(dict(x0=x0, x1=x1, y=y))
    series = df.set_index(['x0', 'x1']).y
    besty = series.min()
    fun = PandasSeriesFunction(series)
    bounds = np.array([[df.x0.min(), df.x0.max()], [df.x1.min(), df.x1.max()]])
    logging.info('bounds=%s' % str(bounds))

    # axes = np.array([[1, 0], [0, 1]])
    axes = None
    optresult = minimize(
        fun, x0=[10.0, 10.0], bounds=bounds, tol=0.01, options=dict(
            verbose=verbose, axes=axes,
            scalar_options=dict(
                verbose=False, parabolic_method=True, golden_section_method=False)),
         method=multivariate_discrete_gap_filling_minimizer)
    if verbose:
        logging.info(optresult)
    assert optresult.fun == besty
    assert fun(optresult.x) == besty

    axes = np.array([[1, -1], [-1, 1], [1, 0], [0, 1]])
    optresult = minimize(
        fun, x0=[10.0, 10.0], bounds=bounds, tol=0.01, options=dict(
            verbose=verbose, axes=axes, maxiter=3, blah=1,
            scalar_options=dict(
                verbose=False, parabolic_method=True, golden_section_method=False)),
         method=multivariate_discrete_gap_filling_minimizer)
    if verbose:
        logging.info(optresult)
    assert optresult.fun == besty
    assert fun(optresult.x) == besty
